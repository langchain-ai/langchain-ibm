[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "langchain-db2"
version = "1.0.0a1"
description = "An integration package connecting Db2 vector store and LangChain"
authors = [{ name = "IBM" }]
license = { text = "MIT" }
requires-python = ">=3.10,<4.0"
readme = "README.md"

dependencies = [
    "langchain-core>=1.0.0,<2.0.0",
    "langchain-community>=0.4.0,<2.0.0",
    "ibm-db>=3.2.6,<4.0.0",
]

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-ibm/tree/main/libs/langchain-db2"
repository = "https://github.com/langchain-ai/langchain-ibm"

[dependency-groups]
lint = [
    "ruff>=0.13.1,<0.14.0",
]
typing = [
    "mypy>=1.17.1,<2.0.0",
]
test = [
    "pytest>=8.4.0,<9.0.0",
    "pytest-asyncio>=0.23.2,<1.0.0",
    "pytest-socket>=0.7.0,<1.0.0",
    "pytest-watcher>=0.3.4,<1.0.0",
    "langchain-tests>=0.3.5,<1.0.0",
    "sentence-transformers>=4.0.1,<5.0.0",
]

test_integration = []

codespell = [
  "codespell>=2.2.6,<3.0.0",
]

dev = []

[tool.ruff]
fix = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
pydocstyle.convention = "google"
pep8-naming.classmethod-decorators = [
    "langchain_core.pydantic_v1.validator",
]
flake8-annotations.allow-star-arg-any = true
flake8-annotations.mypy-init-return = true
select = ["ALL"]
ignore = [
    "COM812", # Messes with the formatter
    "C901",    # Complex functions
    "SIM105",  # Rarely useful
    "PERF203", # Rarely useful
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0914", # Too many local variables
    "PLR0915", # Too many statements
    "PLR2004",
    #TODO
    "ARG002",
    "BLE001",
    "ANN401",
    "FBT",
    "D301",
    "PLW",
    "A001",
    "B028",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",       # Docstring checks in tests
    "S101",    # Tests need assertions
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001",  # Private member access in tests
    "T201",
    "FIX",     # TODOs
    "TD",      # TODOs
    # TODO
    "RUF012",
    "PGH003",
    "S",
    "PT"
]
"scripts/*" = [
    "D",
    "T201",
    "INP"
]
"docs/*.ipynb" = [
    "D",
    "T201",
    # TODO
    "INP",
    "ANN",
    "ERA",
    "E",
    "FIX",
    "TD"
]

[tool.mypy]
plugins = ["pydantic.mypy"]
strict = true
warn_unreachable = true

# TODO: activate for 'strict' checking
disallow_any_generics = false
warn_return_any = false

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5 -vv"
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
filterwarnings = "ignore::pytest.PytestUnraisableExceptionWarning"
